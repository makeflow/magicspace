if(1) {}

{
  if(1) {
    let a;
  }
  // A meaningless comment
  do{}while(1)
  ~~~~~~~~~~~~ [empty-line-around-statement]
  let a = 1;
  ~~~~~~~~~~ [empty-line-around-statement]
  if(1) {
  ~~~~~~~
    while(1){}
~~~~~~~~~~~~~~
  }
~~~ [empty-line-around-statement]
}
if (1) {
~~~~~~~~
}
~ [empty-line-around-statement]
if(2) {}
~~~~~~~~ [empty-line-around-statement]
function a() {
~~~~~~~~~~~~~~
}
~ [empty-line-around-statement]
class haha{
~~~~~~~~~~~
}
~ [empty-line-around-statement]

let a = 1;
function foo(arg: number): number;
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ [empty-line-around-statement]
function foo(arg: string): void;
function foo(arg: string | number): void|number{

}
function test(): void {}
~~~~~~~~~~~~~~~~~~~~~~~~ [empty-line-around-statement]

class Test{
  test(){}
  a = 1;
  ~~~~~~ [empty-line-around-statement]
}

class Test{
  hello: string = '1';
  test(name: number): number;
  ~~~~~~~~~~~~~~~~~~~~~~~~~~~ [empty-line-around-statement]
  test(name: string): void;
  test(name: string|number): void|number{
  }
}

if(1){
  {}
  let value = 1;
  ~~~~~~~~~~~~~~ [empty-line-around-statement]
}

if(1){
  let value = 1;
  {}
  ~~ [empty-line-around-statement]
}

if(1){
  {}
}
if(1){
~~~~~~
}else if(0){
~~~~~~~~~~~~
  alert('haha!');
~~~~~~~~~~~~~~~~~
}
~ [empty-line-around-statement]

const obj = {
    methodA(path){
    },
    methodB(name){
    }
}

class Test{
  arrowProp = () => {};
  arrowProp2 = () => {};
  ~~~~~~~~~~~~~~~~~~~~~~ [empty-line-around-statement]
}

class Test{
  a = 2;
  arrowProp = () => {};
  ~~~~~~~~~~~~~~~~~~~~~ [empty-line-around-statement]
}

class Test{
  arrowProp = () => {};
  a = 2;
  ~~~~~~ [empty-line-around-statement]
}

outer:
for(let i=0; i<4; i++){
  break outer;
}
console.log(1);
~~~~~~~~~~~~~~~ [empty-line-around-statement]
outer:
~~~~~~
while(1){
~~~~~~~~~
  break outer;
~~~~~~~~~~~~~~
}
~ [empty-line-around-statement]

outer:
if(1){
  break outer;
}

class Test{
  constructor(name:string);
  constructor(name:string){

  }
}

class Test{
  a = 1;
  constructor(name:string);
  ~~~~~~~~~~~~~~~~~~~~~~~~~ [empty-line-around-statement]
  constructor(name:string){

  }
}

function foo(){
  return 'hello';
}

function foo(){
  return {
    name: 'foo',
    args: undefined
  };
}

function foo(){
  let name = 'foo';
  return {
  ~~~~~~~~
    name,
~~~~~~~~~
    args: undefined
~~~~~~~~~~~~~~~~~~~
  };
~~~~ [empty-line-around-statement]
}

function foo(){
  let name = 'foo';
  return 'foo';
}

function foo(){
    let value = 2;

    switch(value){
        case 1:
            return {
                a: 2,
                b: 3,
            };
        case 4:
            let a = 2;
            return {
            ~~~~~~~~
                a: 2,
~~~~~~~~~~~~~~~~~~~~~
                b: 3,
~~~~~~~~~~~~~~~~~~~~~
            };
~~~~~~~~~~~~~~ [empty-line-around-statement]
        default:
            return {
                a: 2,
                b: 3,
            };
    }

    switch(value){
        default:
            let a = 1;
            return {
            ~~~~~~~~
                a,
~~~~~~~~~~~~~~~~~~
                b: 3,
~~~~~~~~~~~~~~~~~~~~~
            };
~~~~~~~~~~~~~~ [empty-line-around-statement]
    }
}

let oneClass = class{
  constructor(){}
}

let oneClass = class{
  prop = 1;
  constructor(){}
  ~~~~~~~~~~~~~~~ [empty-line-around-statement]
}

let oneClass = class{
  foo(): void {

  }
}

let oneClass = class{
  prop = 1;
  foo(): void {
  ~~~~~~~~~~~~~
  }
~~~ [empty-line-around-statement]
}

class Test {
  get name() {
    return "test";
  }
  get age() {
  ~~~~~~~~~~~
    return 1;
~~~~~~~~~~~~~
  }
~~~ [empty-line-around-statement]
}

class Test{
  name = '';
  get name() {
  ~~~~~~~~~~~~
    return "test";
~~~~~~~~~~~~~~~~~~
  }
~~~ [empty-line-around-statement]
  set name(name: string){
  ~~~~~~~~~~~~~~~~~~~~~~~
    this.name = name;
~~~~~~~~~~~~~~~~~~~~~
  }
~~~ [empty-line-around-statement]
}

let a = 1;
// let b = 1;

class Test {
  age = 1;
}

[empty-line-around-statement]: An empty line is expected before the statement.
